# Use Node.js v18 as the base image
FROM node:18-alpine AS base
# Install the latest pnpm version with corepack
# RUN corepack enable && corepack prepare pnpm@latest --activate
RUN npm install -g pnpm@latest
# ENV PNPM_HOME=/usr/local/bin


# Install dependencies
FROM base AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
# Set working directory
WORKDIR /app
COPY . .
# RUN pnpm i -g nx
RUN pnpm i --filter=. --filter=packages/ui --filter=packages/utils --filter=packages/api-client --filter=apps/site --filter=!*
# Build the project
RUN pnpm dlx nx run-many -t build -p @odnlabs/ui @odnlabs/utils api-client site


# Create the production-ready image - final output of build
FROM base as runner
# Set the working directory to /app
WORKDIR /app
# Don't run production as root
# Add a new group called nodejs, with GID 1001
RUN addgroup -g 1001 -S nodejs
# Add a new user called nextjs, with UID/GID 1001, to run as a non-root user
RUN adduser -S nextjs -u 1001 -G nodejs
# Switch to the `nextjs` user
USER nextjs
# Config files that the app needs
COPY --from=installer --chown=nextjs:nodejs /app/apps/site/next.config.js  .
COPY --from=installer --chown=nextjs:nodejs /app/apps/site/tailwind.config.ts  .
COPY --from=installer --chown=nextjs:nodejs /app/apps/site/postcss.config.js  .
COPY --from=installer --chown=nextjs:nodejs /app/apps/site/package.json .
# Copy the production-ready app from the previous stage to the container (deps + built files)
COPY --from=installer --chown=nextjs:nodejs /app/apps/site/node_modules ./node_modules
COPY --from=installer --chown=nextjs:nodejs /app/public ./public
COPY --from=installer --chown=nextjs:nodejs /app/.next ./.next
# Expose port 3000
EXPOSE 3000
# Start the app on port 3000
CMD ["pnpm", "start"]
