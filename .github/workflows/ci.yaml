# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

concurrency:
  # Group based on workflow name and PR if it exists, if no PR, let it run so carryforward flags work
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  changes:
    name: Change Detection
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      website: ${{ steps.filter.outputs.website }}
      web_client: ${{ steps.filter.outputs.web_client }}
      internal_docs: ${{ steps.filter.outputs.internal_docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all: &all
              - '.github/workflows/deploy.yaml'
              - '.github/workflows/ci.yaml'
              - 'tools/scripts/docker.sh'
              - '.dockerignore'
              - 'docker/ci/docker-compose.yaml'
              - 'docker/production/docker-compose.yaml'
              - 'docker/development/docker-compose.yaml'
              - 'run.sh'
            frontend: &frontend
              - 'libs/tailwind-config/**'
              - 'libs/tsconfig/**'
              - 'libs/ui/**'
              - 'libs/utils-server/**'
              - 'libs/utils-client/**'
            api:
              - *all
              - 'api/**'
              - 'crates/**'
              - 'docker/ci/Dockerfile.api'
            website:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/website/**'
              - 'docker/ci/Dockerfile.website'
            web_client:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/web_client/**'
              - 'docker/ci/Dockerfile.web_client'
            internal_docs:
              - *all
              - *frontend
              - 'apps/internal-docs/**'
              - 'docker/ci/Dockerfile.internal_docs'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install dependencies
        uses: ./tools/actions/pnpm-install

      - name: Create Environment Variables
        shell: bash
        run: chmod +x run.sh && ./run.sh ci setup env

      - name: Build
        run: pnpm run build:ci

      - name: Lint check
        run: pnpm run lint

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install dependencies
        uses: ./tools/actions/pnpm-install

      - name: Create Environment Variables
        shell: bash
        run: chmod +x run.sh && ./run.sh ci setup env

      - name: Format check (main branch only)
        run: pnpm run format:check

  build_and_run_api_image:
    name: Build and Run API Image
    runs-on: ubuntu-latest
    needs: changes
    # Only run on main or dev branch
    if: ((github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))) && needs.changes.outputs.api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run API image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start api

  build_and_run_internal_docs_image:
    name: Build and Run Internal Image
    runs-on: ubuntu-latest
    needs: changes
    # Only run on main or dev branch
    if: ((github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))) && needs.changes.outputs.internal_docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Internal Docs Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start internal_docs

  build_and_run_website_image:
    name: Build and Run Website Image
    runs-on: ubuntu-latest
    needs: changes
    # Only run on main or dev branch
    if: ((github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')))  && needs.changes.outputs.website == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Website image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start website

  build_and_run_web_client_image:
    name: Build and Run Web Client Image
    runs-on: ubuntu-latest
    needs: changes
    # Only run on main or dev branch
    if: ((github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))) && needs.changes.outputs.web_client == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Web Client Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start web_client

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install dependencies
        uses: ./tools/actions/pnpm-install

      - name: Create Environment Variables
        shell: bash
        run: chmod +x run.sh && ./run.sh ci setup env

      - name: Check manypkg
        run: pnpm manypkg check

      - name: Build
        run: pnpm run build

      - name: Run Unit Tests
        run: pnpm run test

      - name: Upload Utils Server Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-report-utils-server
          path: coverage/libs/utils-server/

  e2e_tests:
    name: End-to-end Tests
    runs-on: ubuntu-latest
    # Only run on main or dev branch
    if: (github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install dependencies
        uses: ./tools/actions/pnpm-install

      - name: Create Environment Variables
        shell: bash
        run: chmod +x run.sh && ./run.sh ci setup env

      - name: Install Browsers for Playwright
        run: pnpm exec playwright install --with-deps chromium chrome msedge firefox webkit

      - name: Run End-to-end Tests
        run: pnpm run e2e

      - name: Upload Internal Docs Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report-internal-docs
          path: coverage/apps/internal-docs/

      - name: Upload Web Client Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report-web-client
          path: coverage/apps/web-client/

      - name: Upload Website Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report-website
          path: coverage/apps/website/

  rust_tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check
        run: cargo check --verbose

      - name: Format
        run: cargo fmt --all -- --check --verbose

      - name: Clippy
        run: cargo clippy -- -D warnings --verbose

      # TODO: Have to implement test coverage first
      # - name: Upload API Report
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: api-report
      #     path: coverage/api/

      # - name: Test
      #   run: cargo test --verbose


  upload_to_codecov:
    name: Upload to Codecov
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    # Only run on main or dev branch
    if: (github.event_name == 'pull_request' && (github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'dev')) || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
