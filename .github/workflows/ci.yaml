# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

defaults:
  run:
    shell: bash

jobs:
  commitlint:
    name: Commitlint
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: pnpm exec commitlint --from HEAD~${{ github.event.pull_request.commits }} --to HEAD --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: pnpm exec commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

  filter_check:
    name: Filter check
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      website: ${{ steps.filter.outputs.website }}
      web_client: ${{ steps.filter.outputs.web_client }}
      internal_docs: ${{ steps.filter.outputs.internal_docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all: &all
              - '.github/workflows/deploy.yaml'
              - 'tools/scripts/docker.sh'
              - '.dockerignore'
              - 'run.sh'
            frontend: &frontend
              - 'libs/tailwind-config/**'
              - 'libs/tsconfig/**'
              - 'libs/ui/**'
              - 'libs/utils-server/**'
              - 'libs/utils-client/**'
            api:
              - *all
              - 'api/**'
              - 'services/**'
              - 'docker/production/Dockerfile.api'
            website:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/website/**'
              - 'docker/production/Dockerfile.website'
            web_client:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/web_client/**'
              - 'docker/production/Dockerfile.web_client'
            internal_docs:
              - *all
              - *frontend
              - 'apps/internal-docs/**'
              - 'docker/production/Dockerfile.internal_docs'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Environment Variables
        run: chmod +x run.sh && ./run.sh prod setup env

      - name: Build
        run: pnpm run build

      - name: Lint check (main branch only)
        run: pnpm run lint

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format check (main branch only)
        run: pnpm run format:check

  build_and_run_api_image:
    name: Build and Run API Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run API image
        run: chmod +x run.sh && ./run.sh ci setup api && ./run.sh ci start postgres && ./run.sh ci start api

  build_and_run_website_image:
    name: Build and Run Website Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.website == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Website image
        run: chmod +x run.sh && ./run.sh ci start website

  build_and_run_web_client_image:
    name: Build and Run Web Client Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.web_client == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Web Client Image
        run: chmod +x run.sh && ./run.sh ci start web_client

  build_and_run_internal_docs_image:
    name: Build and Run Internal Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.internal_docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Internal Docs Image
        run: chmod +x run.sh && ./run.sh ci start internal_docs

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check manypkg
        run: pnpm manypkg check

      # TODO: Add tests
      # - name: Tests
      #   run: pnpm run test
