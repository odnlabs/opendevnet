# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy

on:
  push:
    branches: ['main']

jobs:
  filter_check:
    name: Filter check
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      website: ${{ steps.filter.outputs.website }}
      web_client: ${{ steps.filter.outputs.web_client }}
      internal_docs: ${{ steps.filter.outputs.internal_docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all: &all
              - '.github/workflows/deploy.yaml'
              - 'tools/scripts/docker.sh'
              - '.dockerignore'
              - 'run.sh'
            frontend: &frontend
              - 'libs/tailwind-config/**'
              - 'libs/tsconfig/**'
              - 'libs/ui/**'
              - 'libs/utils-server/**'
              - 'libs/utils-client/**'
            api:
              - *all
              - 'api/**'
              - 'crates/**'
              - 'docker/production/Dockerfile.api'
            website:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/website/**'
              - 'docker/production/Dockerfile.website'
            web_client:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/web_client/**'
              - 'docker/production/Dockerfile.web_client'
            internal_docs:
              - *all
              - *frontend
              - 'apps/internal-docs/**'
              - 'docker/production/Dockerfile.internal_docs'

  build_api_image:
    name: Build API Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: |
          chmod +x run.sh &&
          ./run.sh ci setup api &&
          ./run.sh ci build api

  build_website_image:
    name: Build Webite Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.website == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Website image
        run: |
          chmod +x run.sh &&
          ./run.sh ci build website

  build_web_client_image:
    name: Build Web Client Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.web_client == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Web Client Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci build web_client

  build_internal_docs_image:
    name: Build Internal Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.internal_docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Internal Docs Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci build internal_docs

  build_and_run_api_image:
    name: Build and Run API Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test API image
        run: |
          chmod +x run.sh &&
          ./run.sh ci setup api
          ./run.sh ci start api

  build_and_run_website_image:
    name: Build and Run Website Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.website == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Website image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start website

  build_and_run_web_client_image:
    name: Build and Run Web Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.web_client == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Web Client Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start web_client

  build_and_run_internal_docs_image:
    name: Build and Run Internal Docs Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.internal_docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Internal Docs Image
        run: |
          chmod +x run.sh &&
          ./run.sh ci start internal_docs

  push_website_to_registry:
    name: Publish Website to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_website_image', 'build_and_run_website_image']
    if: needs.filter_check.outputs.website == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-website

      - name: Set Production Environment
        run: |
          chmod +x run.sh &&
          ./run.sh prod setup env

      - name: Publish Website
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.website
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  push_web_client_to_registry:
    name: Publish Web Client to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_web_client_image', 'build_and_run_web_client_image']
    if: needs.filter_check.outputs.web_client == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_web_client
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-web_client

      - name: Set Production Environment
        run: |
          chmod +x run.sh &&
          ./run.sh prod setup env

      - name: Publish Web Client
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.web_client
          push: true
          tags: ${{ steps.meta_web_client.outputs.tags }}
          labels: ${{ steps.meta_web_client.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  push_internal_docs_to_registry:
    name: Publish Internal Docs to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_internal_docs_image', 'build_and_run_internal_docs_image']
    if: needs.filter_check.outputs.internal_docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_internal_docs
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-internal_docs

      - name: Set Production Environment
        run: |
          chmod +x run.sh &&
          ./run.sh prod setup env

      - name: Publish Internal Docs App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.internal_docs
          push: true
          tags: ${{ steps.meta_internal_docs.outputs.tags }}
          labels: ${{ steps.meta_internal_docs.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    # Runs if at least one of the depedant jobs was successful
    if: ${{ always() && (needs.push_internal_docs_to_registry.result == 'success' || needs.push_website_to_registry.result == 'success' || needs.push_web_client_to_registry.result == 'success' || (needs.build_api_image.result == 'success' && needs.build_and_run_api_image.result == 'success')) }}
    needs:
      [
        'build_api_image',
        'build_and_run_api_image',
        'push_website_to_registry',
        'push_web_client_to_registry',
        'push_internal_docs_to_registry',
      ]
    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and Deploy
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && chmod +x run.sh && ./run.sh prod setup env && ./run.sh prod update && exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
