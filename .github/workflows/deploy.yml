name: Deploy

on:
  push:
    branches: ['main']

jobs:
  filter_check:
    name: Filter check
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      site: ${{ steps.filter.outputs.site }}
      web: ${{ steps.filter.outputs.web }}
      internal: ${{ steps.filter.outputs.internal }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all: &all
              - '.github/workflows/deploy.yml'
              - 'tools/scripts/docker.sh'
              - 'run.sh'
            frontend: &frontend
              - 'libs/tailwind-config/**'
              - 'libs/tsconfig/**'
              - 'libs/ui/**'
              - 'libs/utils/**'
              - 'libs/utils-client/**'
            api:
              - *all
              - 'apps/api/**'
              - 'docker/production/Dockerfile.api'
            site:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/site/**'
              - 'docker/production/Dockerfile.site'
            web:
              - *all
              - *frontend
              - 'libs/api-client/**'
              - 'apps/web/**'
              - 'docker/production/Dockerfile.web'
            internal:
              - *all
              - *frontend
              - 'apps/internal/**'
              - 'docker/production/Dockerfile.internal'

  build_site_image:
    name: Build Site Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.site == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Site image
        run: chmod +x run.sh && ./run.sh test build site

  build_web_image:
    name: Build Web Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.web == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Web Image
        run: chmod +x run.sh && ./run.sh test build web

  build_internal_image:
    name: Build Internal Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.internal == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Internal Image
        run: chmod +x run.sh && ./run.sh test build internal

  test_site_image:
    name: Test Site Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.site == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Site image
        run: chmod +x run.sh && ./run.sh test start site

  test_web_image:
    name: Test Web Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.web == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Web Image
        run: chmod +x run.sh && ./run.sh test start web

  test_internal_image:
    name: Test Internal Image
    runs-on: ubuntu-latest
    needs: filter_check
    if: needs.filter_check.outputs.internal == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Internal Image
        run: chmod +x run.sh && ./run.sh test start internal

  push_site_to_registry:
    name: Publish Site to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_site_image', 'test_site_image']
    if: needs.filter_check.outputs.site == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-site

      - name: Publish Site
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.site
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  push_web_to_registry:
    name: Publish Web to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_web_image', 'test_web_image']
    if: needs.filter_check.outputs.web == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-web

      - name: Publish Web App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.web
          push: true
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  push_internal_to_registry:
    name: Publish Internal to Docker Hub
    runs-on: ubuntu-latest
    needs: ['filter_check', 'build_internal_image', 'test_internal_image']
    if: needs.filter_check.outputs.internal == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_internal
        uses: docker/metadata-action@v5
        with:
          images: docker.io/slekup/opendevnet-internal

      - name: Publish Internal App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile.internal
          push: true
          tags: ${{ steps.meta_internal.outputs.tags }}
          labels: ${{ steps.meta_internal.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    # Runs if at least one of the depedant jobs was successful
    if: ${{ always() && (needs.push_internal_to_registry.result == 'success' || needs.push_site_to_registry.result == 'success' || needs.push_web_to_registry.result == 'success') }}
    needs:
      [
        'push_site_to_registry',
        'push_web_to_registry',
        'push_internal_to_registry',
      ]
    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and Deploy
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && chmod +x run.sh && ./run.sh prod update && exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
